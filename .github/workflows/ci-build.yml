# ----------------------------------------------------------------------------
# Copyright 2021 The Netty Project
#
# The Netty Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------
name: Build project

on:
  push:
    branches: [ main ]

  schedule:
    - cron: '30 7 * * 1'  # At 07:30 on Monday, every Monday.

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryhandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=240

# Cancel running jobs when a new push happens to the same branch as otherwise it will
# tie up too many resources without providing much value.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux-x86_64:
    runs-on: ubuntu-latest
    name: linux-x86_64
    steps:
      - uses: actions/checkout@v4

      # Caching of maven dependencies
      - uses: actions/cache@v4
        continue-on-error: true
        with:
          path: ~/.m2/repository
          key: build-linux-x86_64-maven-cache-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            build-linux-x86_64-maven-cache-

      - name: Build docker image
        run: docker compose -f docker/docker-compose.centos-7.yaml -f docker/docker-compose.centos-7.18.yaml build

      - name: Build project without leak detection
        run: docker compose -f docker/docker-compose.centos-7.yaml -f docker/docker-compose.centos-7.18.yaml run build | tee build.output

      - name: Checking for test failures
        run: ./.github/scripts/check_build_result.sh build.output

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: build-linux-x86_64-jars
          path: |
            **/target/*.jar

      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: target
          path: |
            **/target/surefire-reports/
            **/hs_err*.log

  build-linux-aarch64:
    runs-on: ubuntu-latest
    name: linux-aarch64
    steps:
      - uses: actions/checkout@v4

      # Caching of maven dependencies
      - uses: actions/cache@v4
        continue-on-error: true
        with:
          path: ~/.m2/repository
          key: build-linux-aarch64-maven-cache-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            build-linux-aarch64-maven-cache-

      - name: Build docker image
        run: docker compose -f docker/docker-compose.centos-7-cross.yaml build

      - name: Build project without leak detection
        run: docker compose -f docker/docker-compose.centos-7-cross.yaml run cross-compile-aarch64-build

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: build-linux-aarch64-jars
          path: |
            **/target/*.jar

      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: target
          path: |
            **/target/surefire-reports/
            **/hs_err*.log

  build-windows:
    runs-on: windows-2022
    name: windows-x86_64
    env:
      # Let's limit the amount of ram that is used to unpack rustup as we saw
      # failures sometimes due the fact that not enough memory could be reserved.
      RUSTUP_UNPACK_RAM: 134217728  # Use 128 MiB
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 8

      - name: Install stable rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Configuring Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86_amd64

      - name: Install tools
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install ninja nasm

      # Cache .m2/repository
      - uses: actions/cache@v4
        continue-on-error: true
        with:
          path: ~/.m2/repository
          key: windows-x86_64-maven-cache-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            windows-x86_64-maven-cache-

      - name: Build project
        run: ./mvnw.cmd -B -ntp --file pom.xml clean package

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: build-windows-jars
          path: |
            **/target/*.jar

      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: build-windows-target
          path: |
            **/target/surefire-reports/
            **/hs_err*.log

  build-android:
    runs-on: ubuntu-latest
    name: android
    # Skip the build for now as cargo ndk segfaults and we need to figure out why.
    if: false
    env:
      SDK_VER: "android-21"
      NDK_VER: "25.2.9519653"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup ninja-build
        run: sudo apt-get install ninja-build

      - name: Setup go
        uses: actions/setup-go@v5

      - name: Install cargo-ndk
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-ndk

      - name: Install Rust toolchain for Android architectures
        run: rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 8

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 8512546

      - name: Install Android SDK platforms
        run: sdkmanager "platforms;${{ env.SDK_VER }}"

      - name: Install Android NDK
        run: sdkmanager "ndk;${{ env.NDK_VER }}"

      - name: Setup environment
        run: export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}

      # Cache .m2/repository
      # Caching of maven dependencies
      - uses: actions/cache@v4
        continue-on-error: true
        with:
          path: ~/.m2/repository
          key: android-maven-cache-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            android-maven-cache-

      - name: Build project
        run: ./mvnw -B -ntp --file pom.xml clean package -Dandroid

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: build-android-jars-aars
          path: |
            **/target/*.jar
            **/target/*.aar

      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: build-android-target
          path: |
            **/target/surefire-reports/
            **/hs_err*.log
